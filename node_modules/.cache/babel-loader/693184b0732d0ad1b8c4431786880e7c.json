{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/santanamu/Desktop/pos-p3/pos-sys/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/santanamu/Desktop/pos-p3/pos-sys/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar Result = /*#__PURE__*/function () {\n  function Result(types, arrayMode) {\n    _classCallCheck(this, Result);\n    this._types = types;\n    this._arrayMode = arrayMode;\n    this.command = undefined;\n    this.rowCount = undefined;\n    this.fields = [];\n    this.rows = [];\n  }\n  _createClass(Result, [{\n    key: \"consumeCommand\",\n    value: function consumeCommand(pq) {\n      this.command = pq.cmdStatus().split(' ')[0];\n      this.rowCount = parseInt(pq.cmdTuples(), 10);\n    }\n  }, {\n    key: \"consumeFields\",\n    value: function consumeFields(pq) {\n      var nfields = pq.nfields();\n      for (var x = 0; x < nfields; x++) {\n        this.fields.push({\n          name: pq.fname(x),\n          dataTypeID: pq.ftype(x)\n        });\n      }\n    }\n  }, {\n    key: \"consumeRows\",\n    value: function consumeRows(pq) {\n      var tupleCount = pq.ntuples();\n      for (var i = 0; i < tupleCount; i++) {\n        var row = this._arrayMode ? this.consumeRowAsArray(pq, i) : this.consumeRowAsObject(pq, i);\n        this.rows.push(row);\n      }\n    }\n  }, {\n    key: \"consumeRowAsObject\",\n    value: function consumeRowAsObject(pq, rowIndex) {\n      var row = {};\n      for (var j = 0; j < this.fields.length; j++) {\n        var value = this.readValue(pq, rowIndex, j);\n        row[this.fields[j].name] = value;\n      }\n      return row;\n    }\n  }, {\n    key: \"consumeRowAsArray\",\n    value: function consumeRowAsArray(pq, rowIndex) {\n      var row = [];\n      for (var j = 0; j < this.fields.length; j++) {\n        var value = this.readValue(pq, rowIndex, j);\n        row.push(value);\n      }\n      return row;\n    }\n  }, {\n    key: \"readValue\",\n    value: function readValue(pq, rowIndex, colIndex) {\n      var rawValue = pq.getvalue(rowIndex, colIndex);\n      if (rawValue === '') {\n        if (pq.getisnull(rowIndex, colIndex)) {\n          return null;\n        }\n      }\n      var dataTypeId = this.fields[colIndex].dataTypeID;\n      return this._types.getTypeParser(dataTypeId)(rawValue);\n    }\n  }]);\n  return Result;\n}();\nfunction buildResult(pq, types, arrayMode) {\n  var result = new Result(types, arrayMode);\n  result.consumeCommand(pq);\n  result.consumeFields(pq);\n  result.consumeRows(pq);\n  return result;\n}\nmodule.exports = buildResult;","map":null,"metadata":{},"sourceType":"script"}