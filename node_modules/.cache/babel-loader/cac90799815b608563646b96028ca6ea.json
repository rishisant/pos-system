{"ast":null,"code":"'use strict';\n\nexports.parse = function (source, transform) {\n  return new ArrayParser(source, transform).parse();\n};\nfunction ArrayParser(source, transform) {\n  this.source = source;\n  this.transform = transform || identity;\n  this.position = 0;\n  this.entries = [];\n  this.recorded = [];\n  this.dimension = 0;\n}\nArrayParser.prototype.isEof = function () {\n  return this.position >= this.source.length;\n};\nArrayParser.prototype.nextCharacter = function () {\n  var character = this.source[this.position++];\n  if (character === '\\\\') {\n    return {\n      value: this.source[this.position++],\n      escaped: true\n    };\n  }\n  return {\n    value: character,\n    escaped: false\n  };\n};\nArrayParser.prototype.record = function (character) {\n  this.recorded.push(character);\n};\nArrayParser.prototype.newEntry = function (includeEmpty) {\n  var entry;\n  if (this.recorded.length > 0 || includeEmpty) {\n    entry = this.recorded.join('');\n    if (entry === 'NULL' && !includeEmpty) {\n      entry = null;\n    }\n    if (entry !== null) entry = this.transform(entry);\n    this.entries.push(entry);\n    this.recorded = [];\n  }\n};\nArrayParser.prototype.parse = function (nested) {\n  var character, parser, quote;\n  while (!this.isEof()) {\n    character = this.nextCharacter();\n    if (character.value === '{' && !quote) {\n      this.dimension++;\n      if (this.dimension > 1) {\n        parser = new ArrayParser(this.source.substr(this.position - 1), this.transform);\n        this.entries.push(parser.parse(true));\n        this.position += parser.position - 2;\n      }\n    } else if (character.value === '}' && !quote) {\n      this.dimension--;\n      if (!this.dimension) {\n        this.newEntry();\n        if (nested) return this.entries;\n      }\n    } else if (character.value === '\"' && !character.escaped) {\n      if (quote) this.newEntry(true);\n      quote = !quote;\n    } else if (character.value === ',' && !quote) {\n      this.newEntry();\n    } else {\n      this.record(character.value);\n    }\n  }\n  if (this.dimension !== 0) {\n    throw new Error('array dimension not balanced');\n  }\n  return this.entries;\n};\nfunction identity(value) {\n  return value;\n}","map":null,"metadata":{},"sourceType":"script"}